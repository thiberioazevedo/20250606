// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Thunders.TechTest.ApiService.Data;

#nullable disable

namespace Thunders.TechTest.ApiService.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250611215631_IndicesRelatoriosProcessar")]
    partial class IndicesRelatoriosProcessar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Cidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("Sequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequencial"));

                    b.HasKey("Id")
                        .HasName("PK_Cidades");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidades", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Estado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("Sequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequencial"));

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2)");

                    b.HasKey("Id")
                        .HasName("PK_Estados");

                    b.ToTable("Estados", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.FaturamentoHoraCidadeReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATE");

                    b.Property<DateTime?>("DataHoraSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FimProcessamento")
                        .HasColumnType("datetime2");

                    b.Property<short>("Hora")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("InicioProcessamento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Processar")
                        .HasColumnType("bit");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.Property<long>("Sequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequencial"));

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("PK_FaturamentosHorasCidadesReports");

                    b.HasIndex("CidadeId");

                    b.HasIndex("Processar")
                        .HasDatabaseName("IX_FaturamentosHorasCidadesReports_Processar");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Processar"), false);

                    b.ToTable("FaturamentosHorasCidadesReports", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.FaturamentoPracaMesReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Ano")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DataHoraSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FimProcessamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InicioProcessamento")
                        .HasColumnType("datetime2");

                    b.Property<short>("Mes")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PracaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Processar")
                        .HasColumnType("bit");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.Property<long>("Sequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequencial"));

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("PK_FaturamentosPracasMesesReports");

                    b.HasIndex("PracaId");

                    b.HasIndex("Processar")
                        .HasDatabaseName("IX_FaturamentosPracasMesesReports_Processar");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Processar"), false);

                    b.ToTable("FaturamentosPracasMesesReports", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.FaturamentoPracaTipoVeiculoReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataHoraSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FimProcessamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InicioProcessamento")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PracaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Processar")
                        .HasColumnType("bit");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.Property<long>("Sequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequencial"));

                    b.Property<int>("TipoVeiculo")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id")
                        .HasName("PK_FaturamentosPracasTiposVeiculosReports");

                    b.HasIndex("PracaId");

                    b.HasIndex("Processar")
                        .HasDatabaseName("IX_FaturamentosPracasTiposVeiculosReports_Processar");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("Processar"), false);

                    b.ToTable("FaturamentosPracasTiposVeiculosReports", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.PedagioUtilizacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataHoraUtilizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PracaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Sequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequencial"));

                    b.Property<decimal>("ValorPago")
                        .HasColumnType("DECIMAL(5,2)");

                    b.Property<Guid>("VeiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_PedagiosUtilizacoes");

                    b.HasIndex("VeiculoId")
                        .HasDatabaseName("IX_PedagioUtilizacao_VeiculoId");

                    b.HasIndex("PracaId", "DataHoraUtilizacao")
                        .HasDatabaseName("IX_PedagioUtilizacao_PracaId_DataHoraUtilizacao");

                    b.ToTable("PedagiosUtilizacoes", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Praca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<long>("Sequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequencial"));

                    b.HasKey("Id")
                        .HasName("PK_Pracas");

                    b.HasIndex("CidadeId")
                        .HasDatabaseName("IX_Praca_CidadeId");

                    b.ToTable("Pracas", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("VARCHAR(7)");

                    b.Property<long>("Sequencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Sequencial"));

                    b.Property<int>("TipoVeiculo")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Veiculos");

                    b.HasIndex("TipoVeiculo")
                        .HasDatabaseName("IX_Veiculo_TipoVeiculo");

                    b.ToTable("Veiculos", (string)null);
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Cidade", b =>
                {
                    b.HasOne("Thunders.TechTest.ApiService.Models.Estado", "Estado")
                        .WithMany("CidadeCollection")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cidades_Estados");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.FaturamentoHoraCidadeReport", b =>
                {
                    b.HasOne("Thunders.TechTest.ApiService.Models.Cidade", "Cidade")
                        .WithMany("FaturamentoHoraCidadeReportCollection")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FaturamentosHorasCidadesReports_Cidades");

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.FaturamentoPracaMesReport", b =>
                {
                    b.HasOne("Thunders.TechTest.ApiService.Models.Praca", "Praca")
                        .WithMany("FaturamentoPracaMesReportCollection")
                        .HasForeignKey("PracaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FaturamentosPracasMesesReports_Pracas");

                    b.Navigation("Praca");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.FaturamentoPracaTipoVeiculoReport", b =>
                {
                    b.HasOne("Thunders.TechTest.ApiService.Models.Praca", "Praca")
                        .WithMany("FaturamentoPracaTipoVeiculoReportCollection")
                        .HasForeignKey("PracaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FaturamentosPracasTiposVeiculosReports_Pracas");

                    b.Navigation("Praca");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.PedagioUtilizacao", b =>
                {
                    b.HasOne("Thunders.TechTest.ApiService.Models.Praca", "Praca")
                        .WithMany("PedagioUtilizacaoColletction")
                        .HasForeignKey("PracaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PedagiosUtilizacoes_Pracas");

                    b.HasOne("Thunders.TechTest.ApiService.Models.Veiculo", "Veiculo")
                        .WithMany("PedagioUtilizacaoColletction")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PedagiosUtilizacoes_Veiculos");

                    b.Navigation("Praca");

                    b.Navigation("Veiculo");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Praca", b =>
                {
                    b.HasOne("Thunders.TechTest.ApiService.Models.Cidade", "Cidade")
                        .WithMany("PracaCollection")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cidades_Pracas");

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Cidade", b =>
                {
                    b.Navigation("FaturamentoHoraCidadeReportCollection");

                    b.Navigation("PracaCollection");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Estado", b =>
                {
                    b.Navigation("CidadeCollection");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Praca", b =>
                {
                    b.Navigation("FaturamentoPracaMesReportCollection");

                    b.Navigation("FaturamentoPracaTipoVeiculoReportCollection");

                    b.Navigation("PedagioUtilizacaoColletction");
                });

            modelBuilder.Entity("Thunders.TechTest.ApiService.Models.Veiculo", b =>
                {
                    b.Navigation("PedagioUtilizacaoColletction");
                });
#pragma warning restore 612, 618
        }
    }
}
